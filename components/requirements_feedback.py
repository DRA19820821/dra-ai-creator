# components/requirements_feedback.py

import streamlit as st
from typing import List, Dict

def show_requirements_feedback(
    issues: List[Dict[str, str]], 
    original_demand: str,
    attempt_number: int = 1
):
    """
    Exibe feedback sobre requisitos n√£o aprovados de forma interativa
    
    Args:
        issues: Lista de dicion√°rios com 'problema' e 'sugestao'
        original_demand: Descri√ß√£o original do usu√°rio
        attempt_number: N√∫mero da tentativa atual
    """
    
    # Header com status
    col1, col2 = st.columns([3, 1])
    with col1:
        st.markdown("### üîç Revis√£o dos Requisitos")
    with col2:
        st.metric("Tentativa", f"{attempt_number}/3")
    
    # Explica√ß√£o amig√°vel
    st.info("""
    ü§ñ **O que aconteceu?**
    
    Analisamos sua descri√ß√£o e identificamos alguns pontos que precisam ser mais espec√≠ficos 
    para criar a melhor solu√ß√£o poss√≠vel para voc√™.
    """)
    
    # Mostrar issues com expansores
    st.markdown("### ‚ö†Ô∏è Pontos a esclarecer:")
    
    for i, issue in enumerate(issues, 1):
        with st.expander(f"**Ponto {i}:** {issue['problema'][:80]}...", expanded=True):
            st.error(f"**Problema identificado:**\n{issue['problema']}")
            st.success(f"**{issue['sugestao']}**")
            
            # Mini exemplo inline
            if 'visualiza√ß√µes' in issue['problema'].lower():
                st.code("""
Exemplo de descri√ß√£o clara:
"Preciso de um gr√°fico de barras mostrando 
o saldo m√©dio por faixa de dias de atraso"
                """, language="text")
    
    st.markdown("---")
    
    # √Årea de refinamento com tabs
    tab1, tab2, tab3 = st.tabs(["‚úèÔ∏è Refinar", "üí° Dicas", "üìù Exemplo Completo"])
    
    with tab1:
        st.markdown("**Reescreva sua necessidade incluindo os detalhes solicitados:**")
        
        # Mostrar descri√ß√£o original em destaque
        with st.container():
            st.markdown("**Sua descri√ß√£o original:**")
            st.text_area(
                "Original", 
                value=original_demand, 
                height=100, 
                disabled=True,
                label_visibility="collapsed"
            )
        
        # √Årea para nova descri√ß√£o
        refined = st.text_area(
            "Nova descri√ß√£o (mais detalhada):",
            placeholder="Cole aqui sua descri√ß√£o original e adicione os detalhes solicitados acima...",
            height=250,
            key=f"refined_demand_{attempt_number}"
        )
        
        col1, col2, col3 = st.columns([2, 2, 1])
        
        with col1:
            submit = st.button(
                "üöÄ Processar novamente", 
                type="primary",
                use_container_width=True
            )
        
        with col2:
            if st.button("üîÑ Usar IA para ajudar", use_container_width=True):
                st.session_state['use_ai_helper'] = True
        
        with col3:
            if st.button("‚ùå", help="Cancelar"):
                st.session_state.clear()
                st.rerun()
        
        if submit and refined:
            return refined
        elif submit:
            st.warning("‚ö†Ô∏è Por favor, preencha a descri√ß√£o refinada")
    
    with tab2:
        show_refinement_tips(issues)
    
    with tab3:
        show_complete_example()
    
    return None


def show_refinement_tips(issues: List[Dict]):
    """Mostra dicas contextuais baseadas nos issues"""
    
    st.markdown("### üí° Checklist para uma boa descri√ß√£o:")
    
    checklist = {
        'visualiza√ß√µes': [
            "Tipo de gr√°fico (barras, linha, pizza, mapa, tabela)",
            "Quais dados visualizar (eixo X e Y)",
            "Filtros ou segmenta√ß√µes necess√°rias"
        ],
        'alertas': [
            "Condi√ß√£o para disparar (ex: quando X > Y)",
            "Canal de notifica√ß√£o (email, dashboard, Slack)",
            "Frequ√™ncia de verifica√ß√£o (tempo real, di√°ria, semanal)"
        ],
        'm√©trica': [
            "Nome da m√©trica",
            "F√≥rmula de c√°lculo precisa",
            "Unidade de medida (%, R$, quantidade)"
        ],
        'dados': [
            "Colunas necess√°rias da base",
            "Per√≠odo de an√°lise (√∫ltimo m√™s, 12 meses, etc.)",
            "Granularidade (dia, semana, m√™s)"
        ]
    }
    
    # Mostrar checklist relevante baseado nos issues
    for issue in issues:
        for key, items in checklist.items():
            if key in issue['problema'].lower():
                st.markdown(f"**Para {key}:**")
                for item in items:
                    st.markdown(f"- ‚úì {item}")


def show_complete_example():
    """Mostra exemplo completo de descri√ß√£o bem estruturada"""
    
    st.markdown("### üìù Exemplo de descri√ß√£o completa e clara:")
    
    st.markdown("""
    **Contexto:**
    Tenho uma base de dados de carteira de cr√©dito com as seguintes colunas:
    - customer_id (identificador √∫nico)
    - saldo_atual (valor em R$)
    - dias_atraso (n√∫mero de dias de atraso no pagamento)
    - data_referencia (data da coleta do dado)
    - regiao (regi√£o geogr√°fica)
    
    ---
    
    **Visualiza√ß√µes necess√°rias:**
    
    1. **Dashboard principal** contendo:
       - Gr√°fico de barras: distribui√ß√£o de clientes por faixa de saldo (0-1k, 1k-5k, 5k-10k, 10k+)
       - Gr√°fico de linha: evolu√ß√£o mensal da taxa de inadimpl√™ncia nos √∫ltimos 12 meses
       - KPI cards no topo: total de clientes, saldo total, taxa de inadimpl√™ncia, saldo m√©dio
       - Filtros: por regi√£o e per√≠odo
    
    2. **Gr√°fico de pizza**: propor√ß√£o de clientes por faixa de dias de atraso (0, 1-30, 31-60, 61-90, 90+)
    
    ---
    
    **M√©tricas e c√°lculos:**
    
    - **Taxa de inadimpl√™ncia**: percentual de clientes com dias_atraso >= 30
    - **Saldo em risco**: soma do saldo_atual dos clientes com dias_atraso >= 60
    - **Evolu√ß√£o mensal**: compara√ß√£o percentual com m√™s anterior
    
    ---
    
    **Alertas necess√°rios:**
    
    1. Email para equipe@empresa.com quando:
       - Taxa de inadimpl√™ncia aumentar mais de 10% em rela√ß√£o ao m√™s anterior
       - Saldo em risco ultrapassar R$ 5 milh√µes
    
    2. Verifica√ß√£o: di√°ria (√†s 8h da manh√£)
    """)
    
    st.success("‚úÖ Esta descri√ß√£o cont√©m todos os elementos necess√°rios!")


# Fun√ß√£o auxiliar para usar IA como ajudante
def ai_helper_for_refinement(original: str, issues: List[Dict]) -> str:
    """Usa LLM para sugerir uma vers√£o refinada da descri√ß√£o"""
    
    with st.spinner("ü§ñ IA gerando sugest√£o de refinamento..."):
        # Prompt para o LLM
        prompt = f"""
        Descri√ß√£o original do usu√°rio:
        {original}
        
        Problemas identificados:
        {[issue['problema'] for issue in issues]}
        
        Reescreva a descri√ß√£o do usu√°rio incluindo os detalhes necess√°rios para resolver 
        os problemas identificados. Mantenha o estilo e contexto original, apenas adicione 
        as especifica√ß√µes faltantes de forma natural.
        """
        
        # Chamar LLM (implementar com seu modelo)
        # refined = call_llm(prompt)
        
        # Por enquanto, retornar placeholder
        refined = f"{original}\n\n[IA adicionaria aqui os detalhes sugeridos]"
        
        return refined
    

if __name__ == "__main__":
    # Teste do componente
    test_issues = [
        {
            'problema': 'Ambiguidade na defini√ß√£o de visualiza√ß√µes',
            'sugestao': 'üìä Especifique o tipo de gr√°fico e quais dados visualizar'
        },
        {
            'problema': 'Defini√ß√£o da m√©trica principal incompleta',
            'sugestao': 'üìê Explique como calcular a m√©trica'
        }
    ]
    
    test_demand = "Preciso de visualiza√ß√µes e alertas sobre inadimpl√™ncia"
    
    result = show_requirements_feedback(test_issues, test_demand, 1)
    if result:
        st.success(f"Nova descri√ß√£o: {result}")